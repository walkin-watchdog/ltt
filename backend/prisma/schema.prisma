// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model RefreshTokenBlacklist {
  jti   String  @id
  exp   DateTime
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  role      UserRole @default(VIEWER)
  resetToken String?
  resetTokenExpiry DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Product {
  id          String      @id @default(cuid())
  title       String
  productCode String      @unique
  slug        String      @unique
  description String
  type        ProductType
  category    String
  location    String
  duration    String
  capacity    Int
  highlights  String[]
  inclusions  String[]
  exclusions  String[]
  itineraries   Itinerary[]
  images      String[]
  tags        String[]
  difficulty  String?
  healthRestrictions String?
  accessibility String?
  guides      String[]
  languages   String[]
  meetingPoint String?
  pickupLocations String[]
  cancellationPolicy String
  isActive    Boolean @default(true)
  availabilityStartDate DateTime?
  availabilityEndDate   DateTime?
  destinationId String?
  experienceCategoryId String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  packages      Package[]
  availabilities Availability[]
  bookings      Booking[]
  reviews       Review[]
  abandonedCarts AbandonedCart[]
  blockedDates  BlockedDate[]
  destination   Destination? @relation(fields: [destinationId], references: [id])
  experienceCategory ExperienceCategory? @relation(fields: [experienceCategoryId], references: [id])

  @@map("products")
}

model Itinerary {
  id          String   @id @default(cuid())
  productId   String
  day         Int
  title       String
  description String
  activities  String[]
  images      String[]

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("itineraries")
}

// Fixed Prisma Schema
model Package {
  id          String @id @default(cuid())
  productId   String
  name        String
  description String
  basePrice   Float
  discountType String? @default("none") // "none", "percentage", "fixed"
  discountValue Float? @default(0)  // percentage or fixed amount
  currency    String @default("INR")
  inclusions  String[]
  maxPeople   Int
  isActive    Boolean @default(true)
  startDate   DateTime @default(now())
  endDate     DateTime?
  
  availabilities Availability[] @relation("PackageAvailability")
  product   Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  bookings  Booking[]
  slots     PackageSlot[]


  @@map("packages")
}

model PackageSlot {
  id        String   @id @default(cuid())
  packageId String
  Time      String[]
  booked    Int      @default(0)
  days      String[]
  
  package   Package  @relation(fields: [packageId], references: [id], onDelete: Cascade)
  bookings  Booking[]
  adultTiers SlotAdultTier[]  // Separate model for slot-specific tiers
  childTiers SlotChildTier[]  // Separate model for slot-specific tiers
  
  @@map("package_slots")
  @@index([packageId])
}

// New models for slot-specific pricing
model SlotAdultTier {
  id     String @id @default(cuid())
  slotId String
  min    Int
  max    Int
  price  Float
  discountType String? @default("none") // "none", "percentage", "fixed"
  discountValue Float? @default(0)  // percentage or fixed amount
  currency String
  isActive Boolean @default(true)
  
  slot PackageSlot @relation(fields: [slotId], references: [id], onDelete: Cascade)
  
  @@map("slot_adult_tiers")
}

model SlotChildTier {
  id     String @id @default(cuid())
  slotId String
  min    Int
  max    Int
  price  Float
  discountType String? @default("none") // "none", "percentage", "fixed"
  discountValue Float? @default(0)  // percentage or fixed amount
  currency String
  isActive Boolean @default(true)
  
  slot PackageSlot @relation(fields: [slotId], references: [id], onDelete: Cascade)
  
  @@map("slot_child_tiers")
}

model Availability {
  id        String            @id @default(cuid())
  productId String
  startDate  DateTime         @default(now())
  endDate   DateTime?
  status    AvailabilityStatus
  booked    Int               @default(0)
  packageId String?           /// new optional FK to support per-package tallies

  package Package? @relation("PackageAvailability", fields: [packageId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("availabilities")
}


model Booking {
  id            String        @id @default(cuid())
  bookingCode   String        @unique
  productId     String
  packageId     String?
  slotId        String?
  customerName  String
  customerEmail String
  customerPhone String
  adults        Int
  children      Int           @default(0)
  totalAmount   Float
  status        BookingStatus @default(PENDING)
  paymentStatus PaymentStatus @default(PENDING)
  bookingDate   DateTime
  notes         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  product Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  package Package? @relation(fields: [packageId], references: [id], onDelete: SetNull)
  slot PackageSlot?  @relation(fields: [slotId], references: [id], onDelete: SetNull)

  payments Payment[]

  @@map("bookings")
}



model Payment {
  id              String        @id @default(cuid())
  bookingId       String
  razorpayOrderId String?
  razorpayPaymentId String?
  paypalOrderId      String?
  paypalCaptureId    String?
  amount          Float
  currency        String        @default("INR")
  status          PaymentStatus @default(PENDING)
  paymentMethod   String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  booking Booking @relation(fields: [bookingId], references: [id])

  @@map("payments")
}

model Review {
  id        String   @id @default(cuid())
  productId String
  name      String
  email     String
  rating    Int
  comment   String
  isApproved Boolean @default(false)
  createdAt DateTime @default(now())

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("reviews")
}

model Coupon {
  id          String     @id @default(cuid())
  code        String     @unique
  description String
  type        CouponType
  value       Float
  minAmount   Float?
  maxDiscount Float?
  usageLimit  Int?
  usedCount   Int        @default(0)
  isActive    Boolean    @default(true)
  validFrom   DateTime
  validUntil  DateTime
  createdAt   DateTime   @default(now())

  @@map("coupons")
}

model TripRequest {
  id            String   @id @default(cuid())
  name          String
  email         String
  phone         String
  destination   String
  startDate     DateTime
  endDate       DateTime
  adults        Int
  children      Int      @default(0)
  budget        String
  interests     String[]
  accommodation String
  transport     String
  specialRequests String?
  status        RequestStatus @default(PENDING)
  createdAt     DateTime @default(now())

  @@map("trip_requests")
}

model Newsletter {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())

  @@map("newsletters")
}

model AbandonedCart {
  id            String   @id @default(cuid())
  email         String
  productId     String
  packageId     String?
  customerData  Json
  remindersSent Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("abandoned_carts")
}

model BlockedDate {
  id        String   @id @default(cuid())
  productId String
  date      DateTime
  reason    String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("blocked_dates")
}

enum UserRole {
  ADMIN
  EDITOR
  VIEWER
}

enum ProductType {
  TOUR
  EXPERIENCE
}

enum AvailabilityStatus {
  AVAILABLE
  SOLD_OUT
  NOT_OPERATING
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum CouponType {
  PERCENTAGE
  FIXED
}

enum RequestStatus {
  PENDING
  PROCESSING
  COMPLETED
  CANCELLED
}

model Destination {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  tagline     String
  description String
  image       String
  bannerImage String
  highlights  String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  products    Product[]
  
  @@map("destinations")
}

model ExperienceCategory {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  tagline     String
  description String
  image       String
  bannerImage String
  highlights  String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  products    Product[]
  
  @@map("experience_categories")
}